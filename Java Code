import java.sql.*;
import java.util.Scanner;

/**
 * @author 
 */
public class JDBC_Proj {
    //  Database credentials
    static String USER;
    static String PASS;
    static String DBNAME;
    //This is the specification for the printout that I'm doing:
    //each % denotes the start of a new field.
    //The - denotes left justification.
    //The number indicates how wide to make the field.
    //The "s" denotes that it's a string.  All of our output in this test are
    //strings, but that won't always be the case.
    static final String displayFormat="%-5s%-15s%-15s%-15s\n";
// JDBC driver name and database URL
    static final String JDBC_DRIVER = "org.apache.derby.jdbc.ClientDriver";
    static String DB_URL = "jdbc:derby://localhost:1527/";
//            + "testdb;user=";
/**
 * Takes the input string and outputs "N/A" if the string is empty or null.
 * @param input The string to be mapped.
 * @return  Either the input string or "N/A" as appropriate.
 */
    public static String dispNull (String input) {
        //because of short circuiting, if it's null, it never checks the length.
        if (input == null || input.length() == 0)
            return "N/A";
        else
            return input;
    }

    public static void main(String[] args) {
        //Prompt the user for the database name, and the credentials.
        //If your database has no credentials, you can update this code to
        //remove that from the connection string.
        Scanner in = new Scanner(System.in);
        System.out.print("Name of the database (not the user account): ");
        DBNAME = in.nextLine();
        System.out.print("Database user name: ");
        USER = in.nextLine();
        System.out.print("Database password: ");
        PASS = in.nextLine();
        //Constructing the database URL connection string
        DB_URL = DB_URL + DBNAME + ";user="+ USER + ";password=" + PASS;
       
        Connection conn = null; //initialize the connection
        Statement stmt = null;  //initialize the statement that we're using
        PreparedStatement pstmt = null; // iintialize the prepated statement

        try {
            
            //STEP 2: Register JDBC driver
            Class.forName("org.apache.derby.jdbc.ClientDriver");

            //STEP 3: Open a connection
            System.out.println("Connecting to database...");
            conn = DriverManager.getConnection(DB_URL);

            //STEP 4: Execute a query
            System.out.println("Creating statement...");
            stmt = conn.createStatement();
            String InsertSQL;
            String SelectSQL;
             //*******************************************************
             // INSERTING RECORDS
////              System.out.println("Inserting records into the table...");
////              //stmt = conn.createStatement();
////
////              sql = "INSERT INTO WritingGroups " +
////                           "VALUES ('Test1Name','Test1Writer', 2017, 'Test1Subject')";
////              stmt.executeUpdate(sql);
////              sql = "INSERT INTO WritingGroups " +
////                           "VALUES ('Test2Name','Test2Writer', 2017, 'Test2Subject')";
////              stmt.executeUpdate(sql);
////              System.out.println("Inserted records into the table...");
             //*******************************************************
             // DELETE STATEMENT
              System.out.println("Executing a Delete Statment ");
              String DeleteSQL = "DELETE FROM WritingGroups " +
                           "WHERE GroupName = 'name1' ";
              stmt.executeUpdate(DeleteSQL);
             //*******************************************************
             // PREPARED STATEMENT
             String PUpdateSQL = "Update WritingGroups SET GroupName = ? WHERE Subject = ?";
             String PInsertSQL = "INSERT INTO WritingGroups VALUES (?, ?, ?, ?)";
             pstmt = conn.prepareStatement(PInsertSQL);
             //*******************************************************
             //READ INPUT FROM USER
////             System.out.println("Input a name: ");
////             Scanner scan = new Scanner(System.in);
////             String gname = scan.next();
////             System.out.println("Input a writer: ");
////             String gwriter = scan.next();
////             System.out.println("Input a year: ");
////             int gyear = scan.nextInt();
////             System.out.println("Input a subject: ");
////             String gsub = scan.next();
////             pstmt.setString(1, gname); //CHANGE //Test1Name Test1Writer 2017 Test1Subject
////             pstmt.setString(2, gsub);
////             pstmt.setInt(3, gyear);
////             pstmt.setString(4, gsub);
////             //int i = scan.nextInt();
////             pstmt.executeUpdate();
             //*******************************************************
             //DISPLAY INFROMATION FROM TABLE
            String Selectsql = "SELECT GroupName, HeadWriter, YearFormed, Subject FROM WritingGroups";
            ResultSet rs = stmt.executeQuery(Selectsql);

            //STEP 5: Extract data from result set
            System.out.printf(displayFormat, "Group Name", "Head Writer", "Year Formed", "Subject");
            while (rs.next()) {
                //Retrieve by column name
                String GroupName = rs.getString("GroupName");
                String HeadWriter = rs.getString("HeadWriter");
                String YearFormed = rs.getString("YearFormed");
                String Subject = rs.getString("Subject");

                //Display values
                System.out.printf(displayFormat,
                        dispNull(GroupName), dispNull(HeadWriter), dispNull(YearFormed), dispNull(Subject));
            }
            //CLOSE AND CLEAN ENVIORNMENT
            //STEP 6: Clean-up environment
            rs.close();
            pstmt.close();
            stmt.close();
            conn.close();
        } catch (SQLException se) {
            //Handle errors for JDBC
            se.printStackTrace();
        } catch (Exception e) {
            //Handle errors for Class.forName
            e.printStackTrace();
        } finally {
            //finally block used to close resources
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (SQLException se2) {
            }// nothing we can do
            try{
                if (pstmt != null) {
                    pstmt.close();
                }
            } catch (SQLException se3){
            }
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException se) {
                se.printStackTrace();
            }//end finally try
        }//end try
    }  
        //FUNCTION TO DISPLAY GROUPS
        public static void displayGroups (Connection conn) throws SQLException
        {
            Statement stmt = null;
            String Selectsql = "SELECT GroupName, HeadWriter, YearFormed, Subject FROM WritingGroups";
            stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(Selectsql);
            
            System.out.printf("DISPLAYING GROUP TABLE\n");    
            System.out.printf(" Group Name\n Head Writer\n Year Formed\n Subject\n");
            while (rs.next()) {
                //Retrieve by column name
                String GroupName = rs.getString("GroupName");
                String HeadWriter = rs.getString("HeadWriter");
                String YearFormed = rs.getString("YearFormed");
                String Subject = rs.getString("Subject");

                //Display values
                System.out.printf("\n");
                System.out.printf(dispNull(GroupName));
                System.out.printf("\n");
                System.out.printf(dispNull(HeadWriter));
                System.out.printf("\n");
                System.out.printf(dispNull(YearFormed));
                System.out.printf("\n");
                System.out.printf(dispNull(Subject));
                System.out.printf("\n\n");
            }
            //CLOSE AND CLEAN ENVIORNMENT
            rs.close();
            stmt.close();
        }
        
        //FUNCTION TO DISPLAY BOOKS
        public static void displayBooks (Connection conn) throws SQLException
        {
            Statement stmt = null;
            String Selectsql = "SELECT GroupName, BookTitle, PublisherName, YearPublished, NumberPages FROM Books";
            stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(Selectsql);

            System.out.printf("DISPLAYING BOOK TABLE\n");
            System.out.printf(" Group Name\n Book Title\n Publisher Name\n Year Published\n Number of Pages\n");
            while (rs.next()) {
                //Retrieve by column name
                String GroupName = rs.getString("GroupName");
                String BookTitle = rs.getString("BookTitle");
                String PublisherName = rs.getString("PublisherName");
                String YearPublished = rs.getString("YearPublished");
                String NumberPages = rs.getString("NumberPages");

                //Display values
                System.out.printf("\n");
                System.out.printf(dispNull(GroupName));
                System.out.printf("\n");
                System.out.printf(dispNull(BookTitle));
                System.out.printf("\n");
                System.out.printf(dispNull(PublisherName));
                System.out.printf("\n");
                System.out.printf(dispNull(YearPublished));
                System.out.printf("\n");
                System.out.printf(dispNull(NumberPages));
                System.out.printf("\n\n");
            }
            //CLOSE AND CLEAN ENVIORNMENT
            rs.close();
            stmt.close();
        }
        
        // FUNCTION TO DISPLAY PUBLISHERS 
         public static void displayPublishers (Connection conn) throws SQLException
        {
            Statement stmt = null;
            String Selectsql = "SELECT PublisherName, PublisherAddress, PublisherPhone, PublisherEmail FROM Publishers";
            stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(Selectsql);

            System.out.printf("DISPLAYING PUBLISHER TABLE\n");
            System.out.printf(" Publisher Name\n Publisher Address\n Publisher Phone\n Publisher Email\n");
            while (rs.next()) {
                //Retrieve by column name
                String PubName = rs.getString("PublisherName");
                String PubAddress = rs.getString("PublisherAddress");
                String PubPhone = rs.getString("PublisherPhone");
                String PubEmail = rs.getString("PublisherEmail");

                //Display values
                System.out.printf("\n");
                System.out.printf(dispNull(PubName));
                System.out.printf("\n");
                System.out.printf(dispNull(PubAddress));
                System.out.printf("\n");
                System.out.printf(dispNull(PubPhone));
                System.out.printf("\n");
                System.out.printf(dispNull(PubEmail));
                System.out.printf("\n\n");
            }
            //CLOSE AND CLEAN ENVIORNMENT
            rs.close();
            stmt.close();
        }
        
        public static void insertBook(Connection conn) throws SQLException
         {
              Statement stmt = null;
              System.out.println("Inserting records into the table...");
              stmt = conn.createStatement();

              String sql = "INSERT INTO Books " +
                           "VALUES ('Whose Bio?','grace 2', 'Anel Ruiz', 1994, 100)";
              stmt.executeUpdate(sql);
              sql = "INSERT INTO Books " +
                           "VALUES ('Science Fiction Life','Whose the real monster', 'Neil Wong', 1994, 100)";
              stmt.executeUpdate(sql);
              System.out.println("Inserted records into the table...");
              displayBooks(conn);
         }
}
